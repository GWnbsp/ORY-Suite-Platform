services:
  oathkeeper:
    container_name: ${COMPOSE_PROJECT_NAME}_oathkeeper
    image: oryd/oathkeeper:v0.40.7
    env_file:
      - ../config/development.env
    ports:
      - "4455:4455"
      - "4456:4456"
    environment:
      - LOG_LEVEL=${OATHKEEPER_LOG_LEVEL}
      - LOG_FORMAT=${OATHKEEPER_LOG_FORMAT}
    command: serve proxy -c "/etc/config/oathkeeper/oathkeeper.yml"
    volumes:
      - type: bind
        source: ../../configs/oathkeeper
        target: /etc/config/oathkeeper
    restart: on-failure
    networks:
      - intranet
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 1G
        reservations:
          memory: 512M

  kratos-migrate:
    container_name: ${COMPOSE_PROJECT_NAME}_kratos-migrate
    image: oryd/kratos:v1.3.1
    env_file:
      - ../config/development.env
    environment:
      - DSN=${KRATOS_DSN}
      - LOG_LEVEL=${KRATOS_LOG_LEVEL}
      - LOG_FORMAT=${KRATOS_LOG_FORMAT}
    volumes:
      - type: bind
        source: ../../configs/kratos
        target: /etc/config/kratos
    command: -c /etc/config/kratos/kratos.yml migrate sql -e --yes
    restart: on-failure
    networks:
      - intranet
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 1G
        reservations:
          memory: 512M
    depends_on:
      postgres:
        condition: service_healthy

  kratos:
    container_name: ${COMPOSE_PROJECT_NAME}_kratos
    depends_on:
      - kratos-migrate
    image: oryd/kratos:v1.3.1
    env_file:
      - ../config/development.env
    environment:
      - DSN=${KRATOS_DSN}
      - LOG_LEVEL=${KRATOS_LOG_LEVEL}
      - LOG_FORMAT=${KRATOS_LOG_FORMAT}
    ports:
      - "4433:4433"
      - "4434:4434"
    command: >
      serve -c /etc/config/kratos/kratos.yml 
      ${DEV_MODE:+--dev --watch-courier}
    volumes:
      - type: bind
        source: ../../configs/kratos
        target: /etc/config/kratos
    networks:
      - intranet
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 1G
        reservations:
          memory: 512M

  hydra-migrate:
    container_name: ${COMPOSE_PROJECT_NAME}_hydra_migrate
    image: oryd/hydra:v2.2.0
    env_file:
      - ../config/development.env
    environment:
      - DSN=${HYDRA_DSN}
      - LOG_LEVEL=${HYDRA_LOG_LEVEL}
      - LOG_FORMAT=${HYDRA_LOG_FORMAT}
    command: migrate -c /etc/config/hydra/hydra.yml sql -e --yes
    volumes:
      - type: bind
        source: ../../configs/hydra
        target: /etc/config/hydra
    restart: on-failure
    networks:
      - intranet
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 1G
        reservations:
          memory: 512M
    depends_on:
      postgres:
        condition: service_healthy

  hydra:
    container_name: ${COMPOSE_PROJECT_NAME}_hydra
    image: oryd/hydra:v2.2.0
    env_file:
      - ../config/development.env
    environment:
      - DSN=${HYDRA_DSN}
      - LOG_LEVEL=${HYDRA_LOG_LEVEL}
      - LOG_FORMAT=${HYDRA_LOG_FORMAT}
    ports:
      - "4444:4444"
      - "4445:4445"
      - "5555:5555"
    command: >
      serve -c /etc/config/hydra/hydra.yml all
      ${DEV_MODE:+--dev}
    volumes:
      - type: bind
        source: ../../configs/hydra
        target: /etc/config/hydra
    restart: unless-stopped
    depends_on:
      - hydra-migrate
    networks:
      - intranet
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 1G
        reservations:
          memory: 512M

  keto-migrate:
    container_name: ${COMPOSE_PROJECT_NAME}_keto_migrate
    image: oryd/keto:v0.12.0
    env_file:
      - ../config/development.env
    environment:
      - DSN=${KETO_DSN}
      - LOG_LEVEL=${KETO_LOG_LEVEL}
      - LOG_FORMAT=${KETO_LOG_FORMAT}
    volumes:
      - type: bind
        source: ../../configs/keto
        target: /home/ory
    command: ["migrate", "up", "-y"]
    restart: on-failure
    networks:
      - intranet
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 1G
        reservations:
          memory: 512M
    depends_on:
      postgres:
        condition: service_healthy

  keto:
    container_name: ${COMPOSE_PROJECT_NAME}_keto
    image: oryd/keto:v0.12.0
    env_file:
      - ../config/development.env
    environment:
      - DSN=${KETO_DSN}
      - LOG_LEVEL=${KETO_LOG_LEVEL}
      - LOG_FORMAT=${KETO_LOG_FORMAT}
      - LOG_LEAK_SENSITIVE_VALUES=true
    volumes:
      - type: bind
        source: ../../configs/keto
        target: /home/ory
    ports:
      - "4466:4466"
      - "4467:4467"
    depends_on:
      - keto-migrate
    networks:
      - intranet
    command: serve
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:4466/health/ready",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 1G
        reservations:
          memory: 512M

  mailslurper:
    image: oryd/mailslurper:latest-smtps
    container_name: ${COMPOSE_PROJECT_NAME}_mailslurper
    ports:
      - "4436:4436" # SMTPS 端口
      - "4437:4437" # Web UI 端口
    networks:
      - intranet

  # Vue 前端界面服务
  vue-ui:
    # 构建配置
    build:
      context: ./vue # 构建上下文目录
      dockerfile: Dockerfile # 使用的 Dockerfile
    container_name: ${COMPOSE_PROJECT_NAME}_vue_ui # 容器名称
    ports:
      - "3000:3000" # 映射端口到宿主机
    networks:
      - intranet # 使用内部网络
    depends_on:
      - oathkeeper # 依赖于 oathkeeper 服务
    # 健康检查配置
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:3000",
        ]
      interval: 10s # 检查间隔
      timeout: 5s # 超时时间
      retries: 5 # 重试次数
    restart: unless-stopped # 容器重启策略
    # 资源限制配置
    deploy:
      resources:
        limits:
          cpus: "0.5" # CPU 使用限制
          memory: 512M # 内存使用限制
        reservations:
          memory: 256M # 内存预留

  postgres:
    container_name: ${COMPOSE_PROJECT_NAME}_postgres
    image: postgres:14-alpine
    env_file:
      - ../config/development.env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - postgres_backup:/backup
      - ../postgres/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - intranet
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 1G
        reservations:
          memory: 512M

volumes:
  postgres_data:
  postgres_backup:

networks:
  intranet:
    driver: bridge
